<robot name="hunter2" xmlns:xacro="http://www.ros.org/wiki/xacro">
<gazebo reference="lidar_2d_link">
    <sensor name="gpu_lidar" type="gpu_lidar">
      <pose relative_to="lidar_2d_link">0 0 0 0 0 0</pose>
      <topic>/lidar_2d</topic>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.047198</min_angle>  <!-- -60° -->
            <max_angle> 1.047198</max_angle>  <!-- +60° -->
          </horizontal>
          <vertical>
            <samples>1</samples>
            <resolution>0.01</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.08</min>
          <max>35.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <always_on>1</always_on>
      <visualize>true</visualize>
      <frame_id>lidar_2d_link</frame_id>
      <gz_frame_id>lidar_2d_link</gz_frame_id>
      <ign_frame_id>lidar_2d_link</ign_frame_id>
    </sensor>
    <material>Gazebo/Red</material>
  </gazebo>


<gazebo reference="imu_link">
  <sensor name="imu" type="imu">
    <topic>/imu</topic>
    <pose relative_to='imu_link'>0 0 0 0 0 0</pose>
    <frame_id>imu_link</frame_id>
    <update_rate>200</update_rate>
    <always_on>true</always_on>
    <imu>
      <angular_velocity>
        <x><noise type="gaussian"><mean>0</mean><stddev>0.0005</stddev></noise></x>
        <y><noise type="gaussian"><mean>0</mean><stddev>0.0005</stddev></noise></y>
        <z><noise type="gaussian"><mean>0</mean><stddev>0.0005</stddev></noise></z>
      </angular_velocity>
      <linear_acceleration>
        <x><noise type="gaussian"><mean>0</mean><stddev>0.01</stddev></noise></x>
        <y><noise type="gaussian"><mean>0</mean><stddev>0.01</stddev></noise></y>
        <z><noise type="gaussian"><mean>0</mean><stddev>0.01</stddev></noise></z>
      </linear_acceleration>
    </imu>
  </sensor>
</gazebo>

<gazebo reference="lidar_link">
  <sensor name="lidar3d" type="gpu_lidar">
    <topic>/lidar</topic>
    <update_rate>10</update_rate>
     <pose relative_to='lidar_link'>0 0 0 0 0 0</pose>
    <ray>
      <scan>
        <horizontal>
          <samples>1024</samples>
          <resolution>1</resolution>
          <min_angle>-3.14159265</min_angle>
          <max_angle> 3.14159265</max_angle>
        </horizontal>
        <vertical>
          <samples>16</samples>
          <resolution>1</resolution>
          <min_angle>-0.261799</min_angle>  <!-- -15° -->
          <max_angle> 0.261799</max_angle>  <!-- +15° -->
        </vertical>
      </scan>
      <range>
        <min>0.1</min>       <!-- importante: > 0 para não zerar o near clip -->
        <max>100.0</max>
        <resolution>0.01</resolution>
      </range>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.01</stddev>
      </noise>
    </ray>
    <pose relative_to='lidar_link'>0 0 0 0 0 0</pose>
    <frame_id>lidar_link</frame_id>
    <gz_frame_id>lidar_link</gz_frame_id>
    <ign_frame_id>lidar_link</ign_frame_id>
    <always_on>true</always_on>
    <visualize>true</visualize>
  </sensor>
</gazebo>

<gazebo>
  <!-- Plugin Ackermann do Gazebo Sim (Fortress) -->
  <plugin
    filename="libignition-gazebo-ackermann-steering-system.so"
    name="ignition::gazebo::systems::AckermannSteering">

    <!-- Rodas de tração (esquerda/direita). Se só as traseiras tracionam, liste só elas -->
    <left_joint>rear_left_joint</left_joint>
    <right_joint>rear_right_joint</right_joint>

    <!-- Juntas de esterço (dianteiras) -->
    <left_steering_joint>front_steer_left_joint</left_steering_joint>
    <right_steering_joint>front_steer_right_joint</right_steering_joint>

    <!-- Geometria / limites (ajuste para o seu veículo) -->
    <wheel_base>0.650</wheel_base>          <!-- distância entre eixos [m] -->
    <wheel_separation>0.605</wheel_separation>  <!-- bitola [m] -->
    <wheel_radius>0.165</wheel_radius>      <!-- raio da roda [m] -->
    <steering_limit>0.6458</steering_limit> <!-- limite em rad (≈ seu max_steer) -->

    <!-- Tópicos nativos do Gazebo Sim (Ignition Transport) -->
    <!-- Dica: já deixe como /cmd_vel e /odom para casar com a ponte -->
    <topic>/cmd_vel</topic>
    <odom_topic>/odom</odom_topic>
    <tf_topic>/tf</tf_topic>

    <!-- Frames para a odometria publicada pelo plugin -->
    <frame_id>odom</frame_id>
    <child_frame_id>base_link</child_frame_id>

    <!-- (opcionais) limites dinâmicos -->
    <!--
    <odom_publish_frequency>50</odom_publish_frequency>
    <min_velocity>-5.0</min_velocity>
    <max_velocity> 5.0</max_velocity>
    <min_acceleration>-10.0</min_acceleration>
    <max_acceleration> 10.0</max_acceleration>
    -->
  </plugin>

  <plugin
      filename="ignition-gazebo-sensors-system"
      name="gz::sim::systems::Sensors">
      <render_engine>ogre2</render_engine>
  </plugin>

  <plugin
      filename="ignition-gazebo-imu-system"
      name="gz::sim::systems::Imu">
  </plugin>

</gazebo>

<gazebo>
    <plugin filename="gz_ros2_control-system" name="gz_ros2_control::GazeboSimROS2ControlPlugin">
    
    <!-- de onde o plugin vai ler o URDF -->
    <robot_param>robot_description</robot_param>
    <robot_param_node>robot_state_publisher</robot_param_node>

    <!-- YAML acima -->
    <parameters>$(find hunter2_gazebo)/config/controllers.yaml</parameters>

  </plugin>
</gazebo>

</robot>